tags:

  - name: Auth
    description: Autenticacion de usuario.

  - name: Order
    description: Orden publicitaria.

  - name: Contract
    description: Acuerdo entre la emisora y el comercio.

  - name: Owner
    description: Dueño de un comercio.

  - name: Contact
    description: Dueño de un comercio.

  - name: Shop
    description: Representación de un comercio.

  - name: Spot
    description: Audio de una publicidad.

  - name: Block
    description: Bloque publicitario de un determinado horario.

  - name: Price
    description: Precio de un bloque.

  - name: DayOrderBlock
    description: Asociación entre ordenes y los bloques en los que se emitirá cada día.  

  - name: Develops Utilities
    description: Utilizado para la optimización del desarrollo.


paths:

# AUTH

  /api/auth/login:
    post:
      tags: 
        - Auth
      summary: Logea a un usuario
      security:
        - bearerAuth: []
      description: Logea a un usuario y devuelve el token
      operationId: logIn
      requestBody:
        description: Envio de credenciales para login
        content:
          application/json:
            schema:
              $ref: '#components/schemas/Auth'
          required: true
      responses:
        '200':
          description: User logged in successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
                            
            
        '500':
          description: Mensaje de error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'

  #Get-all-Owners
  /api/auth:
    get:
      tags: 
        - Auth
      summary: Lista todos los usuarios existentes
      security:
        - bearerAuth: []
      description: Listar todos los usuarios existentes 
      operationId: USERS-GET-ALL

      responses:
        '200':
          description: All users found successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: All users found successfully
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'    
                
        '500':
          description: Mensaje de error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'

  #Add-user
  /api/auth/register:
    post:
      tags:
        - Auth
      summary: Agregar un usuario
      security:
        - bearerAuth: []
      description: Da de alta un nuevo usuario.
      operationId: USER-ADD

      requestBody:
        description: Envio de datos para crear el nuevo usuario
        $ref: '#/components/requestBodies/User'


      responses:
        '201':
          description: Contract created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Contract created successfully
                  data:
                    $ref: '#/components/schemas/User'
                
        '500':
          description: Mensaje de error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'

  #FindOneContract
  /api/auth/{userId}:
    get:
      tags: 
        - Auth
      summary: Encuentra un User
      security:
        - bearerAuth: []
      description: Devuelve user.
      operationId: USER-GET-ONE
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string

      responses:
        '200':
          description:  Usuario encontrado con exito.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User founded
                  data:
                    $ref: '#/components/schemas/User'
                
        '500':
          description: Mensaje de error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'


  #Update an user
  /api/auth/{patchId}:
    patch:
      tags: 
        - Auth
      summary: Editar un usuario
      security:
        - bearerAuth: []
      description: Edita un usuario de forma parcial o total.
      operationId: USER-PATCH

      parameters:
        - name: patchId
          in: path
          required: true
          schema:
            type: string

      requestBody:
        description: Envio de datos para actualizar el usuario
        $ref: '#/components/requestBodies/UserPatch'


      responses:
        '200':
          description: Devuelve el mensaje de confirmación y el usuario actualizado
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User updated successfully
                  data:
                    $ref: '#/components/schemas/User'
                
        '500':
          description: Mensaje de error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'


  #Delete an user
  /api/auth/{deleteId}:
    delete: 
      tags: 
        - Auth
      summary: Eliminar un usuario
      security:
        - bearerAuth: []
      description: Eliminar un usuario
      operationId: USER-DELETE

      parameters:
        - name: deleteId
          in: path
          required: true
          schema:
            type: string

  

      responses:
        '200':
          description: User eliminado con exito
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User deleted successfully
                  data: 
                    $ref: '#/components/schemas/User'

        

                
        '500':
          description: Mensaje de error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'





# CONTRACT

  #Get-All-Contracts
  /api/contract:
    get:
      tags: 
        - Contract
      summary: Lista todos los contractos existentes
      security:
        - bearerAuth: []
      description: Listar todos los contratos existentes con sus respectivos comercios.
      operationId: CONTRACT-GET-ALL

      responses:
        '200':
          description: All contracts found successfully
          content:
            application/json:
              schema:
                allOf:
                    - $ref: '#/components/schemas/ApiResponse'
                    - type: object
                      properties:
                        data:
                          type: array
                          items:
                            $ref: '#/components/schemas/Contract'      
                
        '500':
          description: Mensaje de error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'

  #FindOneContract
  /api/contract/{contractId}:
    get:
      tags: 
        - Contract
      summary: Encuentra un contrato
      security:
        - bearerAuth: []
      description: Devuelve un contrato y sus comercios.
      operationId: CONTRACT-GET-ONE
      parameters:
        - name: contractId
          in: path
          required: true
          schema:
            type: string

      responses:
        '200':
          description: All contacts found successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Contract founded
                  data:
                    $ref: '#/components/schemas/Contract'
                
        '500':
          description: Mensaje de error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'

  #Add-Contract
  /api/contract/:
    post:
      tags: 
        - Contract
      summary: Crear un contrato
      security:
        - bearerAuth: []
      description: Da de alta un nuevo contrato con los datos enviados.
      operationId: CONTRACT-ADD

      requestBody:
        description: Envio de datos para crear el nuevo contrato
        $ref: '#/components/requestBodies/Contract'


      responses:
        '201':
          description: Contract created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Contract created successfully
                  data:
                    $ref: '#/components/schemas/Contract'
                
        '500':
          description: Mensaje de error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
  
  #Put
  /api/contract/{putId}:
    put:
      tags: 
        - Contract
      summary: Editar un contrato
      security:
        - bearerAuth: []
      description: Edita un contrato de forma idempotente (siempre que se ejecuta logra el mismo resultado).
      operationId: CONTRACT-PUT

      parameters:
        - name: putId
          in: path
          required: true
          schema:
            type: string

      requestBody:
        description: Envio de datos para actualizar el contrato
        $ref: '#/components/requestBodies/Contract'


      responses:
        '200':
          description: Devuelve el mensaje de confirmación y el contrato actualizado
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Contract updated successfully
                  data:
                    $ref: '#/components/schemas/Contract'
                
        '500':
          description: Mensaje de error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
            
  #Patch
  /api/contract/{patchId}:
    patch:
      tags: 
        - Contract
      summary: Editar un contrato
      security:
        - bearerAuth: []
      description: Edita un contrato de forma parcial o total.
      operationId: CONTRACT-PATCH

      parameters:
        - name: patchId
          in: path
          required: true
          schema:
            type: string

      requestBody:
        description: Envio de datos para actualizar el contrato
        $ref: '#/components/requestBodies/ContractPatch'


      responses:
        '200':
          description: Devuelve el mensaje de confirmación y el contrato actualizado
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Contract updated successfully
                  data:
                    $ref: '#/components/schemas/Contract'
                
        '500':
          description: Mensaje de error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'

  #Delete
  /api/contract/{deleteId}:
    delete: 
      tags: 
        - Contract
      summary: Eliminar un contrato
      security:
        - bearerAuth: []
      description: OPERACIÓN NO PERMITIDA
      operationId: CONTRACT-DELETE

      parameters:
        - name: deleteId
          in: path
          required: true
          schema:
            type: string

  

      responses:
        '403':
          description: La operación no esta habilitada.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: This operation is not allowed

                
        '500':
          description: Mensaje de error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'


#OWNER

  #Get-all-Owners
  /api/owner:
    get:
      tags: 
        - Owner
      summary: Lista todos los owners (dueños) existentes
      security:
        - bearerAuth: []
      description: Listar todos los dueños existentes con sus respectivos comercios. El dueño es a quien se factura los servicios.
      operationId: OWNER-GET-ALL

      responses:
        '200':
          description: All owners found successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: All owners found successfully
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Owner'    
                
        '500':
          description: Mensaje de error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'

  #FindOneOwner
  /api/owner/{ownerId}:
    get:
      tags: 
        - Owner
      summary: Encontrar un Owner
      security:
        - bearerAuth: []
      description: Devuelve un dueño con sus comercios (shops) y sus contactos (contact)-
      operationId: OWNER-GET-ONE
      parameters:
        - name: ownerId
          in: path
          required: true
          schema:
            type: string

      responses:
        '200':
          description: Owners found successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Owners found successfully
                  data:
                    $ref: '#/components/schemas/Owner'
        
        '400':
          description: Error en las validaciones 
          content:
            application/json:
              schema: 
                type: object
                properties:
                  message:
                    type: string
                    example: 'Validation fail'


                
        '500':
          description: Mensaje de error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'

  #GetOwnerByCuit
  /api/owner/cuit/{ownerCuit}:
    get:
      tags: 
        - Owner
      summary: Encontrar un Owner por su cuit
      security:
        - bearerAuth: []
      description: Devuelve un dueño con sus comercios (shops).
      operationId: OWNER-GET-ONE-BY-CUIT
      parameters:
        - name: ownerCuit
          in: path
          required: true
          schema:
            type: string

      responses:
        '200':
          description: Owners found successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Owners found successfully
                  data:
                    $ref: '#/components/schemas/Owner'
        
        '400':
          description: Error en las validaciones 
          content:
            application/json:
              schema: 
                type: object
                properties:
                  message:
                    type: string
                    example: 'Validation fail'

        '404':
          description: Owner not found
          content:
            application/json:
              schema: 
                type: object
                properties:
                  message:
                    type: string
                    example: 'Owner not found'


                
        '500':
          description: Mensaje de error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'

  #Add-Owner
  /api/owner/:
    post:
      tags: 
        - Owner
      summary: Crear un Dueño (Owner)
      security:
        - bearerAuth: []
      description: Dar de alta un nuevo dueño.
      operationId: OWNER-ADD

      requestBody:
        description: Envio de datos para crear el nuevo Dueño
        $ref: '#/components/requestBodies/Owner'


      responses:
        '201':
          description: Owner created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Owner created successfully
                  data:
                    $ref: '#/components/schemas/Owner'
        
        '400':
          description: Error en las validaciones 
          content:
            application/json:
              schema: 
                type: object
                properties:
                  message:
                    type: string
                    example: 'Validation fail'


                
        '500':
          description: Mensaje de error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'

  #Put
  /api/owner/{putId}:
    put:
      tags: 
        - Owner
      summary: Editar un dueño
      security:
        - bearerAuth: []
      description: Edita un dueño de forma idempotente (siempre que se ejecuta logra el mismo resultado).
      operationId: OWNER-PUT

      parameters:
        - name: putId
          in: path
          required: true
          schema:
            type: string

      requestBody:
        description: Envio de datos para actualizar el dueño
        $ref: '#/components/requestBodies/Owner'


      responses:
        '200':
          description: Devuelve el mensaje de confirmación y el dueño actualizado
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Owner updated successfully
                  data:
                    $ref: '#/components/schemas/Owner'
        
        '400':
          description: Error en las validaciones 
          content:
            application/json:
              schema: 
                type: object
                properties:
                  message:
                    type: string
                    example: 'Validation fail'

                
        '500':
          description: Mensaje de error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
       
  #Patch
  /api/owner/{patchId}:
    patch:
      tags: 
        - Owner
      summary: Editar un dueño (titular/owner)
      security:
        - bearerAuth: []
      description: Edita un dueño de forma parcial o total.
      operationId: OWNER-PATCH

      parameters:
        - name: patchId
          in: path
          required: true
          schema:
            type: string

      requestBody:
        description: Envio de datos para actualizar un dueño
        $ref: '#/components/requestBodies/OwnerPatch'


      responses:
        '200':
          description: Devuelve el mensaje de confirmación y los datos actualizados del dueño 
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Owner updated successfully
                  data:
                    $ref: '#/components/schemas/Owner'



        '400':
          description: Error en las validaciones 
          content:
            application/json:
              schema: 
                type: object
                properties:
                  message:
                    type: string
                    example: 'Validation fail'
                
        '500':
          description: Mensaje de error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'

  #Delete
  /api/owner/{deleteId}:
    delete: 
      tags: 
        - Owner
      summary: Eliminar un owner
      security:
        - bearerAuth: []
      description: Eliminar los dueños que no tengan asociados comercios (shops)
      operationId: OWNER-DELETE

      parameters:
        - name: deleteId
          in: path
          required: true
          schema:
            type: string

  

      responses:
        '200':
          description: Titular eliminado con exito
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Owner deleted successfully
                  data: 
                    $ref: '#/components/schemas/Owner'

                  
        '404':
          description: Titular no encontrado.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Owner not found
        
          '403':
            description: No se permite eliminar a titulares con comercios asociados.
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: string
                      example: Cannot delete owner because it is referenced in a shop

                
        '500':
          description: Mensaje de error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'


#CONTACT
  #Get-all-Contacts
  /api/contact:
    get:
      tags: 
        - Contact
      summary: Lista todos los Contacts (dueños) existentes
      security:
        - bearerAuth: []
      description: Listar todos los contactos existentes.
      operationId: CONTACT-GET-ALL

      responses:
        '200':
          description: All Contacts found successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: All Contacts found successfully
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Contact'    
                
        '500':
          description: Mensaje de error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'

  #FindOneContact
  /api/contact/{contactId}:
    get:
      tags: 
        - Contact
      summary: Encontrar un Contact
      security:
        - bearerAuth: []
      description: Devuelve un contacto.
      operationId: CONTACT-GET-ONE
      parameters:
        - name: contactId
          in: path
          required: true
          schema:
            type: string

      responses:
        '200':
          description: Contact found successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Contact found successfully
                  data:
                    $ref: '#/components/schemas/Contact'
        
        '400':
          description: Error en las validaciones 
          content:
            application/json:
              schema: 
                type: object
                properties:
                  message:
                    type: string
                    example: 'Validation fail'


                
        '500':
          description: Mensaje de error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'

  #GetContactByDNI
  /api/contact/dni/{contactDNI}:
    get:
      tags: 
        - Contact
      summary: Encontrar un Contact por su DNI
      security:
        - bearerAuth: []
      description: Devuelve un Contact por su DNI
      operationId: CONTACT-GET-ONE-BY-DNI
      parameters:
        - name: contactDNI
          in: path
          required: true
          schema:
            type: string

      responses:
        '200':
          description: Contact found successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Contact found successfully
                  data:
                    $ref: '#/components/schemas/Contact'
        
        '400':
          description: Error en las validaciones 
          content:
            application/json:
              schema: 
                type: object
                properties:
                  message:
                    type: string
                    example: 'Validation fail'

        '404':
          description: Contact not found
          content:
            application/json:
              schema: 
                type: object
                properties:
                  message:
                    type: string
                    example: 'Contact not found'


                
        '500':
          description: Mensaje de error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'

  #Add-Contact
  /api/contact/:
    post:
      tags: 
        - Contact
      summary: Crear un Contact (Contacto)
      security:
        - bearerAuth: []
      description: Dar de alta un nuevo Contacto.
      operationId: CONTACT-ADD

      requestBody:
        description: Envio de datos para crear el nuevo Contacto
        $ref: '#/components/requestBodies/Contact'


      responses:
        '201':
          description: Contact created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Contact created successfully
                  data:
                    $ref: '#/components/schemas/Contact'
        
        '400':
          description: Error en las validaciones 
          content:
            application/json:
              schema: 
                type: object
                properties:
                  message:
                    type: string
                    example: 'Validation fail'


                
        '500':
          description: Mensaje de error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'

  #Put
  /api/contact/{putId}:
    put:
      tags: 
        - Contact
      summary: Editar un Contact
      security:
        - bearerAuth: []
      description: Edita un Contact de forma idempotente (siempre que se ejecuta logra el mismo resultado).
      operationId: Contact-PUT

      parameters:
        - name: putId
          in: path
          required: true
          schema:
            type: string

      requestBody:
        description: Envio de datos para actualizar el Contact
        $ref: '#/components/requestBodies/Contact'


      responses:
        '200':
          description: Devuelve el mensaje de confirmación y el Contact actualizado
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Contact updated successfully
                  data:
                    $ref: '#/components/schemas/Contact'
        
        '400':
          description: Error en las validaciones 
          content:
            application/json:
              schema: 
                type: object
                properties:
                  message:
                    type: string
                    example: 'Validation fail'

                
        '500':
          description: Mensaje de error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
       
  #Patch
  /api/contact/{patchId}:
    patch:
      tags: 
        - Contact
      summary: Editar un Contact (Contacto)
      security:
        - bearerAuth: []
      description: Edita un Contact de forma parcial o total.
      operationId: Contact-PATCH

      parameters:
        - name: patchId
          in: path
          required: true
          schema:
            type: string

      requestBody:
        description: Envio de datos para actualizar un Contact
        $ref: '#/components/requestBodies/ContactPatch'


      responses:
        '200':
          description: Devuelve el mensaje de confirmación y los datos actualizados del Contact 
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Contact updated successfully
                  data:
                    $ref: '#/components/schemas/Contact'



        '400':
          description: Error en las validaciones 
          content:
            application/json:
              schema: 
                type: object
                properties:
                  message:
                    type: string
                    example: 'Validation fail'
                
        '500':
          description: Mensaje de error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'

  #Delete
  /api/contact/{deleteId}:
    delete: 
      tags: 
        - Contact
      summary: Eliminar un Contact
      security:
        - bearerAuth: []
      description: Eliminar los Contact que no tengan asociados comercios (shops)
      operationId: Contact-DELETE

      parameters:
        - name: deleteId
          in: path
          required: true
          schema:
            type: string

  

      responses:
        '200':
          description: Contact eliminado con exito
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Contact deleted successfully
                  data: 
                    $ref: '#/components/schemas/Contact'

                  
        '404':
          description: Contact no encontrado.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Contact not found
        
          '403':
            description: No se permite eliminar a Contact con comercios asociados.
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: string
                      example: Cannot delete Contact because it is referenced in a shop

                
        '500':
          description: Mensaje de error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'


#SHOP

  #Get-all-Shops
  /api/shop:
    get:
      tags: 
        - Shop
      summary: Lista todos los Shops (comercios) existentes
      security:
        - bearerAuth: []
      description: Listar todos los comercios existentes con su dueño y contacto.
      operationId: SHOP-GET-ALL

      responses:
        '200':
          description: All Shop found successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: All Shops found successfully
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Shop'    
                
        '500':
          description: Mensaje de error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'

  #FindOneShop
  /api/shop/{shopId}:
    get:
      tags: 
        - Shop
      summary: Encontrar un Shop
      security:
        - bearerAuth: []
      description: Devuelve un Shop con su contacto y dueño.
      operationId: SHOP-GET-ONE
      parameters:
        - name: shopId
          in: path
          required: true
          schema:
            type: string
            example: 65c0922dad3fb943fc5cb29d

      responses:
        '200':
          description: Shop found successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Shop found successfully
                  data:
                    $ref: '#/components/schemas/Shop'
        
        '400':
          description: Error en las validaciones 
          content:
            application/json:
              schema: 
                type: object
                properties:
                  message:
                    type: string
                    example: 'Validation fail'


                
        '500':
          description: Mensaje de error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'

  #FindShopByCuitAndFantasyName
  /api/shop/search?fantasyName={fantasyName}&cuit={cuitOwner}:
    get:
      tags: 
        - Shop
      summary: Encontrar uno o varios Shops por su nombre de fantasia y el cuit del titular 
      security:
        - bearerAuth: []
      description: Devuelve uno o varios Shops.
      operationId: SHOP-GET-BY-OWNER-&-NAME
      parameters:
        - name: fantasyName
          in: query
          required: true
          schema:
            type: string
            example: 30628284357
        - name: cuitOwner
          in: query
          required: true
          schema:
            type: string
            example: Arte en Flores Decorativas

      responses:
        '200':
          description: Shops found successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Shops found successfully
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Shop'
        
        '400':
          description: Error en las validaciones 
          content:
            application/json:
              schema: 
                type: object
                properties:
                  message:
                    type: string
                    example: 'Validation fail'

        '404':
          description: No se encontraron owner con ese cuit o shops con el fantasyName dado para ese owner.
          content:
            application/json:
              schema: 
                type: object
                properties:
                  message:
                    type: string
                    example: 'Owner not found for the provided cuit'

                
        '500':
          description: Mensaje de error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'

  #FindShopsByOwnerCuit
  /api/shop/{cuitOwner}:
    get:
      tags: 
        - Shop
      summary: Encontrar Shops de un titular
      security:
        - bearerAuth: []
      description: Devuelve una lista de Shops de un titular.
      operationId: SHOP-GET-BY-OWNER
      parameters:
        - name: cuitOwner
          in: path
          required: true
          schema:
            type: string
            example: 30628284357

      responses:
        '200':
          description: Shops found successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Shops found successfully
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Shop'
        
        '400':
          description: Error en las validaciones 
          content:
            application/json:
              schema: 
                type: object
                properties:
                  message:
                    type: string
                    example: 'Validation fail'

        '404':
          description: No se encontraron owner con ese cuit.
          content:
            application/json:
              schema: 
                type: object
                properties:
                  message:
                    type: string
                    example: 'Owner not found for the provided cuit'
                
        '500':
          description: Mensaje de error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'

  #FindShopsByOwnerId
  /api/shop/owner/{idOwner}:
    get:
      tags: 
        - Shop
      summary: Encontrar Shops de un titular
      security:
        - bearerAuth: []
      description: Devuelve una lista de Shops de un titular y su contacto.
      operationId: SHOP-GET-BY-OWNER
      parameters:
        - name: idOwner
          in: path
          required: true
          schema:
            type: string

      responses:
        '200':
          description: Shops found successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Shops found successfully
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Shop'
        
        '400':
          description: Error en las validaciones 
          content:
            application/json:
              schema: 
                type: object
                properties:
                  message:
                    type: string
                    example: 'Validation fail'


                
        '500':
          description: Mensaje de error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'

  #Add-Shop
  /api/shop/:
    post:
      tags: 
        - Shop
      summary: Crear un Shop (Comercio)
      security:
        - bearerAuth: []
      description: Dar de alta un nuevo comercio.
      operationId: SHOP-ADD

      requestBody:
        description: Envio de datos para crear el nuevo comercio
        $ref: '#/components/requestBodies/Shop'


      responses:
        '201':
          description: Shop created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Shop created successfully
                  data:
                    $ref: '#/components/schemas/Shop'
        
        '400':
          description: Error en las validaciones 
          content:
            application/json:
              schema: 
                type: object
                properties:
                  message:
                    type: string
                    example: 'Validation fail'


                
        '500':
          description: Mensaje de error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'

  #Put
  /api/shop/{putId}:
    put:
      tags: 
        - Shop
      summary: Editar un Shop
      security:
        - bearerAuth: []
      description: Edita un Shop de forma idempotente (siempre que se ejecuta logra el mismo resultado).
      operationId: Shop-PUT

      parameters:
        - name: putId
          in: path
          required: true
          schema:
            type: string

      requestBody:
        description: Envio de datos para actualizar el Shop
        $ref: '#/components/requestBodies/Shop'


      responses:
        '200':
          description: Devuelve el mensaje de confirmación y el Shop actualizado
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Shop updated successfully
                  data:
                    $ref: '#/components/schemas/Shop'
        
        '400':
          description: Error en las validaciones 
          content:
            application/json:
              schema: 
                type: object
                properties:
                  message:
                    type: string
                    example: 'Validation fail'

                
        '500':
          description: Mensaje de error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
       
  #Patch
  /api/shop/{patchId}:
    patch:
      tags: 
        - Shop
      summary: Editar un Shop (Contacto)
      security:
        - bearerAuth: []
      description: Edita un Shop de forma parcial o total.
      operationId: Shop-PATCH

      parameters:
        - name: patchId
          in: path
          required: true
          schema:
            type: string

      requestBody:
        description: Envio de datos para actualizar un Shop
        $ref: '#/components/requestBodies/ShopPatch'


      responses:
        '200':
          description: Devuelve el mensaje de confirmación y los datos actualizados del Shop 
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Contact updated successfully
                  data:
                    $ref: '#/components/schemas/Shop'



        '400':
          description: Error en las validaciones 
          content:
            application/json:
              schema: 
                type: object
                properties:
                  message:
                    type: string
                    example: 'Validation fail'
                
        '500':
          description: Mensaje de error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'

  #Delete
  /api/shop/{deleteId}:
    delete: 
      tags: 
        - Shop
      summary: Eliminar un Shop
      security:
        - bearerAuth: []
      description: Eliminar los Shop que no tengan asociados contratos (contracts)
      operationId: Shop-DELETE

      parameters:
        - name: deleteId
          in: path
          required: true
          schema:
            type: string

  

      responses:
        '200':
          description: Shop eliminado con exito
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Shop deleted successfully
                  data: 
                    $ref: '#/components/schemas/Shop'

                  
        '404':
          description: Shop no encontrado.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Shop not found
        
          '403':
            description: No se permite eliminar a Shop con contratos asociados.
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: string
                      example: Cannot delete Shop because it is referenced in a contract

                
        '500':
          description: Mensaje de error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'



# SPOT 
  #Get-all-Shops
  /api/spot:
    get:
      tags: 
        - Spot
      summary: Lista todos los Spot (Audios) existentes
      security:
        - bearerAuth: []
      description: Listar todos los Spot existentes.
      operationId: SPOT-GET-ALL

      responses:
        '200':
          description: All Spot found successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Find all spot
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Spot'    
                
        '500':
          description: Mensaje de error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'

  #FindOneShop
  /api/spot/file/{idSpot}:
    get:
      tags: 
        - Spot
      summary: Encontrar un Spot
      security:
        - bearerAuth: []
      description: Devuelve un Spot .
      operationId: Spot-GET-ONE
      parameters:
        - name: idSpot
          in: path
          required: true
          schema:
            type: string
            example: 67c5228d1e93f1e663eb6884

      responses:
        '200':
          description: Spot found successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Spot found successfully
                  data:
                    type: object
                    properties:
                      $ref: '#/components/schemas/Spot'
                      url:
                        type: string
        
        '400':
          description: Error en las validaciones 
          content:
            application/json:
              schema: 
                type: object
                properties:
                  message:
                    type: string
                    example: 'Validation fail'


                
        '500':
          description: Mensaje de error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'


  #FindOneSpotFile
  /api/spot/publicSpots/{spotName}:
    get:
      tags: 
        - Spot
      summary: Encontrar un archivo de Spot
      security:
        - bearerAuth: []
      description: Devuelve un audio de Spot .
      operationId: Spot-GET-FILE
      parameters:
        - name: spotName
          in: path
          required: true
          schema:
            type: string
            example: Universo_Paralelo_-_La_K'onga-1740973839666.mp3

      responses:
        '200':
          description: Spot found successfully
          content:
            audio/mpeg: 
              schema:
                type: string
                format: binary
        
          '404':
            description: File not finded.
        

                
        '500':
          description: Mensaje de error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'

  #Cargar un archivo de audio.
  /api/spot/upload:
    post:
      tags: 
        - Spot
      summary: Subir un spot
      security:
        - bearerAuth: []
      description: Guarda un archivo de audio.
      operationId: Spot-UPLOAD-FILE     

      requestBody:
        $ref: '#/components/requestBodies/SpotFile'

      responses:
        '201':
          description: Shop created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Shop created successfully
                  data:
                    $ref: '#/components/schemas/Spot'
      
                
        '500':
          description: Mensaje de error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'


    #Patch
  /api/spot/{patchId}:
    patch:
      tags: 
        - Spot
      summary: Editar un Spot (audio)
      security:
        - bearerAuth: []
      description: Edita un Spot de forma parcial o total.
      operationId: Spot-PATCH

      parameters:
        - name: patchId
          in: path
          required: true
          schema:
            type: string

      requestBody:
        description: Envio de datos para actualizar un Spot
        $ref: '#/components/requestBodies/SpotFile'


      responses:
        '200':
          description: Devuelve el mensaje de confirmación y los datos actualizados del Spot 
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Contact updated successfully
                  data:
                    $ref: '#/components/schemas/Spot'



        '400':
          description: Error en las validaciones 
          content:
            application/json:
              schema: 
                type: object
                properties:
                  message:
                    type: string
                    example: 'Validation fail'
                
        '500':
          description: Mensaje de error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'

  
  #Delete
  /api/spot/{deleteId}:
    delete: 
      tags: 
        - Spot
      summary: Eliminar un Spot
      security:
        - bearerAuth: []
      description: Eliminar un Spot
      operationId: Spot-DELETE

      parameters:
        - name: deleteId
          in: path
          required: true
          schema:
            type: string

  

      responses:
        '200':
          description: Spot eliminado con exito
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Spot deleted successfully
                  data: 
                    $ref: '#/components/schemas/Shop'

                  
        '404':
          description: Spot no encontrado.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Spot not found
        
          # '403':
          #   description: No se permite eliminar a Spot con ordenes asociados.
          #   content:
          #     application/json:
          #       schema:
          #         type: object
          #         properties:
          #           message:
          #             type: string
          #             example: Cannot delete Spot because it is referenced in a orders

                
        '500':
          description: Mensaje de error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'

 
# BLOCK

  #Get-all-Shops
  /api/block:
    get:
      tags: 
        - Block
      summary: Lista todos los Block  existentes
      security:
        - bearerAuth: []
      description: Listar todos los Block existentes.
      operationId: Block-GET-ALL

      responses:
        '200':
          description: All Block found successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Find all Block
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Block'    
                
        '500':
          description: Mensaje de error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'

  #FindOneShop
  /api/block/{idBlock}:
    get:
      tags: 
        - Block
      summary: Encontrar un Block
      security:
        - bearerAuth: []
      description: Devuelve un Block .
      operationId: Block-GET-ONE
      parameters:
        - name: idBlock
          in: path
          required: true
          schema:
            type: string
            example: 67c5228d1e93f1e663eb6884

      responses:
        '200':
          description: Block found successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Block found successfully
                  data:
                    $ref: '#/components/schemas/Block'

        
        '400':
          description: Error en las validaciones 
          content:
            application/json:
              schema: 
                type: object
                properties:
                  message:
                    type: string
                    example: 'Validation fail'


                
        '500':
          description: Mensaje de error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'

  #FindByNum
  /api/block/blockByNum/{num}:
    get:
      tags: 
        - Block
      summary: Encontrar un Block
      security:
        - bearerAuth: []
      description: Devuelve un Block .
      operationId: Block-GET-ONE-BY-NUM
      parameters:
        - name: num
          in: path
          required: true
          schema:
            type: string
            example: "5"

      responses:
        '200':
          description: Block found successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Block found successfully
                  data:
                    $ref: '#/components/schemas/Block'

        
        '400':
          description: Error en las validaciones 
          content:
            application/json:
              schema: 
                type: object
                properties:
                  message:
                    type: string
                    example: 'Validation fail'


                
        '500':
          description: Mensaje de error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'

  #GetManyByNumbers
  /api/block/getManyByNum:
      get:
        tags: 
          - Block
        summary: Lista todos los Block  existentes
        security:
          - bearerAuth: []
        description: Listar todos los Block existentes.
        operationId: Block-GET-ALL

        requestBody:
          contentType: 
            application/json:
              schema:
                type: object
                properties:
                  numsList: 
                    type: array
                       
                


        responses:
          '200':
            description:  Block found successfully
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: string
                      example: Find  Block
                    data:
                      type: array
                      items:
                        $ref: '#/components/schemas/Block'    
                  
          '500':
            description: Mensaje de error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApiErrorResponse'

  #Create all blocks
  /api/block/all:
    post:
      tags:
        - Block
      description: Crea todos los bloques. Uno cada 30 min.
  
  #Create one block
  /api/block/:
    post:
      tags:
        - Block
      summary: Crear un bloque. 
      description: create One block.
      security:
        - bearerAuth: []
      operationId: BLOCK-ADD

      requestBody:
        description: Envio de datos para crear el nuevo BLOQUE
        $ref: '#/components/requestBodies/Block'


      responses:
        '201':
          description: Block created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Block created successfully
                  data:
                    $ref: '#/components/schemas/Block'
        
        '400':
          description: Error en las validaciones 
          content:
            application/json:
              schema: 
                type: object
                properties:
                  message:
                    type: string
                    example: 'Validation fail'


                
        '500':
          description: Mensaje de error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'

    #Patch
  /api/block/{patchId}:
    patch:
      tags: 
        - Block
      summary: Editar un Block (bloque)
      security:
        - bearerAuth: []
      description: Edita un Block de forma parcial o total.
      operationId: Block-PATCH

      parameters:
        - name: patchId
          in: path
          required: true
          schema:
            type: string

      requestBody:
        description: Envio de datos para actualizar un Block
        $ref: '#/components/requestBodies/BlockPatch'


      responses:
        '200':
          description: Devuelve el mensaje de confirmación y los datos actualizados del Block 
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Contact updated successfully
                  data:
                    $ref: '#/components/schemas/Block'



        '400':
          description: Error en las validaciones 
          content:
            application/json:
              schema: 
                type: object
                properties:
                  message:
                    type: string
                    example: 'Validation fail'
                
        '500':
          description: Mensaje de error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'

    #Delete all blocks
  /api/block/deleteall:
    delete: 
      tags:
        - Block  
      description: Elimina todos los bloques registrados.
  
    #Delete one block
  /api/block/{deleteId}:
    delete:
      tags: 
        - Block
      summary: Eliminar un Block
      security:
        - bearerAuth: []
      description: Eliminar un Block
      operationId: Block-DELETE

      parameters:
        - name: deleteId
          in: path
          required: true
          schema:
            type: string

  

      responses:
        '200':
          description: Block eliminado con exito
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Block deleted successfully
                  data: 
                    $ref: '#/components/schemas/Block'

                  
        '404':
          description: Block no encontrado.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Block not found
        
                
        '500':
          description: Mensaje de error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'


#PRICE

  #Get-all-Prices
  /api/price:
    get:
      tags: 
        - Price
      summary: Lista todos los Prices (precios) existentes
      security:
        - bearerAuth: []
      description: Listar todos los precios existentes con su bloque.
      operationId: Price-GET-ALL

      responses:
        '200':
          description: All Prices found successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: All Prices found successfully
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Price'    
                
        '500':
          description: Mensaje de error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'

  #FindOnePrice
  /api/price/{priceId}:
    get:
      tags: 
        - Price
      summary: Encontrar un Price
      security:
        - bearerAuth: []
      description: Devuelve un Price con su bloque.
      operationId: PRICE-GET-ONE
      parameters:
        - name: priceId
          in: path
          required: true
          schema:
            type: string
            example: 67b904464bd0c3f4c7685769

      responses:
        '200':
          description: Price found successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Price found successfully
                  data:
                    $ref: '#/components/schemas/Price'
        
        '400':
          description: Error en las validaciones 
          content:
            application/json:
              schema: 
                type: object
                properties:
                  message:
                    type: string
                    example: 'Validation fail'


                
        '500':
          description: Mensaje de error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'

  #Add-Shop
  /api/price/:
    post:
      tags: 
        - Price
      summary: Crear un Price (precio) para un bloque
      security:
        - bearerAuth: []
      description: Dar de alta un nuevo precio.
      operationId: PRICE-ADD

      requestBody:
        description: Envio de datos para crear el nuevo precio
        $ref: '#/components/requestBodies/Price'


      responses:
        '201':
          description: Price created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Price created successfully
                  data:
                    $ref: '#/components/schemas/Price'
        
        '400':
          description: Error en las validaciones 
          content:
            application/json:
              schema: 
                type: object
                properties:
                  message:
                    type: string
                    example: 'Validation fail'


                
        '500':
          description: Mensaje de error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'

  #Add prices to all blocks
  /api/price/all:
    post:
      tags:
        - Price
      summary: Agrega un precio a todos los bloques.
      description: Agrega a todos los bloques existentes el mismo precio.

      security:
        - bearerAuth: []


      requestBody:
        description: Valor a agregar a todos los bloques
        content:
          application/json:
            schema: 
              type: object
              properties:             
                  value: 
                    type: number
                    format: int64
                    example: 100.00
                    nullable: false
      
      responses: 

        '200':
          description: All blocks whit a new price assigned
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: All blocks whit a new price assigned
                  data:
                    $ref: '#/components/schemas/Price'
        '500':
          description: Mensaje de error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'

  #Patch
  /api/price/{patchId}:
    patch:
      tags: 
        - Price
      summary: Editar un Price (Precio)
      security:
        - bearerAuth: []
      description: Edita un Price de forma parcial o total.
      operationId: Price-PATCH

      parameters:
        - name: patchId
          in: path
          required: true
          schema:
            type: string

      requestBody:
        description: Envio de datos para actualizar un Price
        $ref: '#/components/requestBodies/PricePatch'


      responses:
        '200':
          description: Devuelve el mensaje de confirmación y los datos actualizados del Price 
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Contact updated successfully
                  data:
                    $ref: '#/components/schemas/Price'



        '400':
          description: Error en las validaciones 
          content:
            application/json:
              schema: 
                type: object
                properties:
                  message:
                    type: string
                    example: 'Validation fail'
                
        '500':
          description: Mensaje de error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'

  #Delete
  /api/price/{deleteId}:
    delete: 
      tags: 
        - Price
      summary: Eliminar un Price
      security:
        - bearerAuth: []
      description: La opración no esta disponible
      operationId: Price-DELETE

      parameters:
        - name: deleteId
          in: path
          required: true
          schema:
            type: string

  

      responses:
        # '200':
        #   description: Price eliminado con exito
        #   content:
        #     application/json:
        #       schema:
        #         type: object
        #         properties:
        #           message:
        #             type: string
        #             example: Shop deleted successfully
        #           data: 
        #             $ref: '#/components/schemas/Price'

                  
        # '404':
        #   description: Price no encontrado.
        #   content:
        #     application/json:
        #       schema:
        #         type: object
        #         properties:
        #           message:
        #             type: string
        #             example: Price not found
        
          '403':
            description: No se permite eliminar los precios.
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: string
                      example: This operation is not allowed. 


          '500':
            description: Mensaje de error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApiErrorResponse'

      

#DAYORDERBLOCK

  #Get-all-DOBs
  /api/dayorderblock:
    get:
      tags: 
        - DayOrderBlock
      summary: Lista todos los DayOrderBlock (ternarias/DOBs) existentes
      security:
        - bearerAuth: []
      description: Listar todas las ternarias existentes (SIN POPULAR).
      operationId: Price-GET-ALL

      responses:
        '200':
          description: All DOBS found successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: All DayOrderBlocks found successfully
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/DayOrderBlock'    
                
        '500':
          description: Mensaje de error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'

  #FindOnePrice
  /api/dayorderblock/{dobId}:
    get:
      tags: 
        - Price
      summary: Encontrar un DayOrderBlock
      security:
        - bearerAuth: []
      description: Devuelve un DayOrderBlock sin popular.
      operationId: DOB-GET-ONE
      parameters:
        - name: dobId
          in: path
          required: true
          schema:
            type: string
            example: 67b9378f348d061c1ebe69ab

      responses:
        '200':
          description: DayOrderBlock found successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: DayOrderBlock found successfully
                  data:
                    $ref: '#/components/schemas/DayOrderBlock'
        
        '400':
          description: Error en las validaciones 
          content:
            application/json:
              schema: 
                type: object
                properties:
                  message:
                    type: string
                    example: 'Validation fail'


                
        '500':
          description: Mensaje de error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'


  #Get-all-DOBs
  /api/dayorderblock/dates?dateFrom={dateFrom}&dateTo={dateTo}:
    get:
      tags: 
        - DayOrderBlock
      summary: Lista todos los DayOrderBlock (ternarias/DOBs) entre las fechas dadas
      security:
        - bearerAuth: []
      description: Listar todas las ternarias existentes (con datos especificos para mostrar.) entre las fechas dadas como parametros. Fecha desde y fecha hasta para filtrar. La fecha hasta no es oblicatoria (puede estar o no en la url.). Fecha desde no puede ser mayor que fecha hasta. El formato es string AAAA-MM-DD o AAAA-M-D.
      operationId: DOBS-GET-FILTER

      parameters:
        
        - name: dateFrom
          in: query
          required: true
          schema:
            type: string
            example: 2025-3-6
        - name: dateTo
          in: query
          required: false
          schema:
            type: string
            example: 2025-3-7
            default: ""
     


      responses:
        '200':
          description: All DOBS found successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: All DayOrderBlocks found successfully
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/DayOrderBlockResponse'    
                
        '500':
          description: Mensaje de error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'




#ORDER
  #Get-all-Orders
  /api/order:
    get:
      tags: 
        - Order
      summary: Lista todos las Ordenes (Orders) existentes
      security:
        - bearerAuth: []
      description: Listar todos los Ordenes existentes.
      operationId: Ordenes-GET-ALL

      responses:
        '200':
          description: All Orders found successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: All Orders found successfully
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Order'    
                
        '500':
          description: Mensaje de error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'

  #Find One Order
  /api/order/{idOrder}:
    get:
      tags: 
        - Order
      summary: Encontrar un Order
      security:
        - bearerAuth: []
      description: Devuelve un Order con su bloque.
      operationId: Order-GET-ONE
      parameters:
        - name: idOrder
          in: path
          required: true
          schema:
            type: string
            example: 67b904464bd0c3f4c7685769

      responses:
        '200':
          description: Price found successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Price found successfully
                  data:
                    $ref: '#/components/schemas/Order'
        
        '400':
          description: Error en las validaciones 
          content:
            application/json:
              schema: 
                type: object
                properties:
                  message:
                    type: string
                    example: 'Validation fail'


                
        '500':
          description: Mensaje de error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'

  #Get all orders populated
  /api/order/populate:
    get:
      tags:
        - Order
      summary: Lista todos las Ordenes (Orders) existentes POPULADAS CON SUS RELACIONES
      security:
        - bearerAuth: []
      description: Listar todos los Ordenes existentes con todas sus relaciones.
      operationId: Ordenes-GET-ALL

      responses:
        '200':
          description: All Orders found successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Orders populated successfully
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Order'    
                
        '500':
          description: Mensaje de error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'

  #Get not paid orders from a owner.
  /api/order/notPayOrdersByOwnerCuit/{cuit}:
    get:
      tags:
        - Order
      summary: Listar las ordenes adeudadas por un titular.
      security:
        - bearerAuth: []
      description: Lista las ordenes adeudadas por un titular dado su cuit. Pueden ser de varios comercios y distintas contrataciones. 
      operationId: DOB-GET-ONE
      parameters:
        - name: cuit
          in: path
          required: true
          schema:
            type: string
            example: "20449962665"
      
      responses:
        '200':
          description: 'Find not pay orders by owner CUIT'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Find not pay orders by owner CUIT'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Order'    
                
        '500':
          description: Mensaje de error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'

      
  #Get not paid orders from a shop
  /api/order/notPayOrdersByShop/{shopId}:
    get:
      tags:
        - Order
      summary: Listar las ordenes adeudadas por un comercio.
      security:
        - bearerAuth: []
      description: Lista las ordenes adeudadas por un comercio dado su cuit. Pueden ser de varios comercios y distintas contrataciones. 
      operationId: DOB-GET-ONE
      parameters:
        - name: shopId
          in: path
          required: true
          schema:
            type: string
            example: "20449962665"
      
      responses:
        '200':
          description: Find not pay orders by shop Id.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Find not pay orders by shop Id.
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Order'    
                
        '500':
          description: Mensaje de error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'

  #Get noy pay orders filter by dates v2. 
  /api/order/dates/v2/notPayOrders?dateFrom={dateFrom}&dateTo={dateTo}:
    get:
      tags: 
        - Order
      summary: Lista todos los Order  entre las fechas dadas
      security:
        - bearerAuth: []
      description: Listar todas las Ordenes existentes (SIN POPULAR) entre las fechas dadas como parametros. Fecha desde y fecha hasta para filtrar. La fecha hasta no es oblicatoria (puede estar o no en la url.). Fecha desde no puede ser mayor que fecha hasta. El formato es string AAAA-MM-DD o AAAA-M-D.
      operationId: Order-GET-ALL

      parameters:
          
        - name: dateFrom
          in: query
          required: true
          schema:
            type: string
            example: 2025-3-6
        - name: dateTo
          in: query
          required: false
          schema:
            type: string
            example: 2025-3-7
            default: ""
      


      responses:
        '200':
          description: All Order found successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: All Order found successfully
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Order'    
                  
        '500':
          description: Mensaje de error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'

  /api/order/dates/notPayOrdersFilter:
    get:
      tags:
        - Order
      summary: Lista todos las Ordenes (Orders) existentes no pagas pero con datos especificos devueltos.
      security:
        - bearerAuth: []
      description: Lista de las ordenes no pagas los atributos cuit, ownerName, fantasyName, idOrder, nameStrategy, month, totalCost, regular, showName      
      operationId: Ordenes-GET-NOTPAYFILTER


      responses:
        '200':
          description: Find not pay.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Find not pay orders by shop Id.
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        cuit:
                          type: string
                          example: 
                        ownerName:
                          type: string
                          example: "30500010912"
                        fantasyName:
                          type: string
                          example: Informatiks SRL
                        idOrder:
                          type: string
                          example: 67cfa8b10142f39419bf1839
                        nameStrategy:
                          type: string
                          example: Servicios de Transporte
                        month:
                          type: string
                          example: 04-2025
                        totalCost:
                          type: number
                          example: 12800
                        regular:
                          type: boolean
                          example: true 
                        showName:
                          type: string
                          example: "Siempre al Día"


  #Renovar ordenes automaticas
  /api/order/renovateOrders:
    post:
      tags:
        - Order
      summary: Aplicar renovador automatico.
      description: Ejecuta el metodo de renovar las ordenes regulares de forma manual.  

      security:
        - bearerAuth: []

  #Add-Order
  /api/order/:
    post:
      tags: 
        - Order
      summary: Crear un Order publicitaria.
      security:
        - bearerAuth: []
      description: Dar de alta una nueva orden.
      operationId: ORDER-ADD

      requestBody:
        description: Envio de datos para crear una nueva Order.
        $ref: '#/components/requestBodies/Order'


      responses:
        '201':
          description: Price created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Price created successfully
                  data:
                    $ref: '#/components/schemas/Order'
        
        '400':
          description: Error en las validaciones 
          content:
            application/json:
              schema: 
                type: object
                properties:
                  message:
                    type: string
                    example: 'Validation fail'


                
        '500':
          description: Mensaje de error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'


  /api/order/notifyByMail:
    post:
      tags: 
        - Order
      summary: INFORMAR DEUDORES VIA EMAIL.
      security:
        - bearerAuth: []
      description: Enviar un email a los comercios (y sus contactos) que deben ordenes.
      operationId: ORDER-INFORM-MAIL

      requestBody:
        description: Se envia los id de las ordenes que se quieren notificar.
        content: 
          application/json:
            schema: 
              type: object
              properties:
                id: 
                  type: array


  #Edit an orden
  /api/order/{patchId}:
    patch:
      tags: 
        - Order
      summary: Editar un Order (orden)
      security:
        - bearerAuth: []
      description: Edita un Order de forma parcial o total.
      operationId: Order-PATCH

      parameters:
        - name: patchId
          in: path
          required: true
          schema:
            type: string

      requestBody:
        description: Envio de datos para actualizar un Order
        $ref: '#/components/requestBodies/OrderPatch'


      responses:
        '200':
          description: Devuelve el mensaje de confirmación y los datos actualizados del Order 
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Contact updated successfully
                  data:
                    $ref: '#/components/schemas/Order'



        '400':
          description: Error en las validaciones 
          content:
            application/json:
              schema: 
                type: object
                properties:
                  message:
                    type: string
                    example: 'Validation fail'
                
        '500':
          description: Mensaje de error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'


  #Cancel an orden
  /api/order/cancelOrder/{patchId}:
    patch:
      tags: 
        - Order
      summary: Cancelar una Order (orden)
      security:
        - bearerAuth: []
      description: Asignar fecha de cancelacion a la orden. Elimina todos los DOBS futuros. 
      operationId: Order-PATCH-Cancel

      parameters:
        - name: patchId
          in: path
          required: true
          schema:
            type: string

      requestBody:
        description: Envio de datos para cancelar un Order
        $ref: '#/components/requestBodies/CancelOrder'


      responses:
        '200':
          description: Devuelve el mensaje de confirmación y los datos de la orden cancelada. 
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Contact updated successfully
                  data:
                    $ref: '#/components/schemas/Order'



        '400':
          description: Error en las validaciones 
          content:
            application/json:
              schema: 
                type: object
                properties:
                  message:
                    type: string
                    example: 'Validation fail'
                
        '500':
          description: Mensaje de error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'


  #Pay an orden
  /api/order/registerPayment/{patchId}:
    patch:
      tags: 
        - Order
      summary: Registrar el pago una Order (orden)
      security:
        - bearerAuth: []
      description: Asignar un pago a una orden. Registra la fecha y la metodologia.
      operationId: Order-PATCH-Pay

      parameters:
        - name: patchId
          in: path
          required: true
          schema:
            type: string

      requestBody:
        description: Envio de datos para pagar un Order
        $ref: '#/components/requestBodies/PayOrder'


      responses:
        '200':
          description: Devuelve el mensaje de confirmación y los datos de la orden cancelada. 
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Contact updated successfully
                  data:
                    $ref: '#/components/schemas/Order'



        '400':
          description: Error en las validaciones 
          content:
            application/json:
              schema: 
                type: object
                properties:
                  message:
                    type: string
                    example: 'Validation fail'
                
        '500':
          description: Mensaje de error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'


  #Update an order spot
  /api/order/updateSpot/{idOrder}:
    patch:
      tags: 
        - Order
      summary: Actualizar el spot de una Order (orden)
      security:
        - bearerAuth: []
      description: Actualizar el spot 
      operationId: Order-PATCH-Cancel

      parameters:
        - name: patchId
          in: path
          required: true
          schema:
            type: string

      requestBody:
        description: Envio de datos para actualizar el spot de una Order
        content:
          application/json: 
            schema:
              type: object
              properties: 
                spot:
                  type: string
                  example: 654e3fbc97ea9f854e9fa08b
      responses:
        '200':
          description: Devuelve el mensaje de confirmación y los datos de la orden cancelada. 
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Contact updated successfully
                  data:
                    $ref: '#/components/schemas/Order'



        '400':
          description: Error en las validaciones 
          content:
            application/json:
              schema: 
                type: object
                properties:
                  message:
                    type: string
                    example: 'Validation fail'
                
        '500':
          description: Mensaje de error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'


  #Delete an order
  /api/order/{deleteId}:
    delete: 
      tags: 
        - Order
      summary: Eliminar un Order
      security:
        - bearerAuth: []
      description: La opración no esta disponible
      operationId: Order-DELETE

      parameters:
        - name: deleteId
          in: path
          required: true
          schema:
            type: string

  

      responses:
        # '200':
        #   description: Price eliminado con exito
        #   content:
        #     application/json:
        #       schema:
        #         type: object
        #         properties:
        #           message:
        #             type: string
        #             example: Shop deleted successfully
        #           data: 
        #             $ref: '#/components/schemas/Order'

                  
        # '404':
        #   description: Price no encontrado.
        #   content:
        #     application/json:
        #       schema:
        #         type: object
        #         properties:
        #           message:
        #             type: string
        #             example: Price not found
        
          '403':
            description: No se permite eliminar las Order.
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: string
                      example: This operation is not allowed. 


          '500':
            description: Mensaje de error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApiErrorResponse'

      
#DEVELOPS UTILITIES
  /api/sanitizarInformacion:
    post:
      tags:
        - Develops Utilities
      summary: Crea una base de datos con ejemplos sanitizados.
      description: Crea una base de datos en funcion de datos sanitizados escritos en un archivo de codigo. Se recomienda para realizar pruebas. SOLO UTILIZADO PARA DESARROLLO.


  /api/dayorderblock/limpiarBBDD:
    delete: 
      tags: 
        - Develops Utilities
      summary: Eliminar DOBS de ordenes inexistentes
      security:
        - bearerAuth: []
      description: Elimina todas las DOBS restantes de ordenes que ya no existen. Solo utilizado durante etapas del desarrollo en la que la informacion no era integra.
      operationId: DOB-DELETE-NOTREFERENCES

  /api/order//migrarFechas:
    post:
      tags: 
        - Develops Utilities
      summary: Agrega a ciertas ordenes el dateTo - dateFrom.
      description: Utilizado para mantener consistencia entre datos frente a nuevos atributos. Modificaba las ordenes con mes 3-2025. No se utiliza mas. BORRAR PARA DESARROLLO.
      operationId: ORDER-INFORM-MAIL














components:

  securitySchemes:

    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
  
    Contract:
      type: object
      properties:
        id:
          type: string
          example: 654aefd5c3991db2b0d46152
        regDate:
          type: string
          format: date-time
          example: "2023-11-08T02:17:57.072Z"
        dateFrom:
          type: string
          format: date-time
          example: "2023-11-07T03:00:00.000Z"
        dateTo:
          type: string
          format: date-time
        observations:
          type: string
          example: Prefiere estar al principio de la tanda.
        shop:
          $ref: '#/components/schemas/Shop'

    Adress: 
      type: object
      properties:
          street: 
            type: string
            example: "Juan B Justo"
          number: 
            type: string
            example: "500"
          level: 
            type: string,
            example: "5"
          department: 
            type: string
            example: B
          postalCode: 
            type: string
            example: "2000"
          city: 
            type: string
            example: "Rosario"
          province: 
            type: string
            example: "Santa Fe"

    Shop:
      type: object
      properties:
        id:
          type: string
          example: 65c090e1ad3fb943fc5cb298
        regDate:
          type: string
          format: date-time
          example: "2023-11-08T02:17:57.072Z"
        fantasyName: 
          type: string
          example: Transporte DJJB
        address: 
          $ref: '#/components/schemas/Adress'
          example: JB JUSTO 596
        billingType: 
          type: string
          example: Responsable Inscripto
        mail: 
          type: string
          format: email
          example: djjb@gmail.com
        usualPaymentForm: 
          type: string
          example: Efectivo
        type: 
          type: string
          example: PyME
        contact:
          $ref: '#/components/schemas/Contact'
          #type: string
          example: 654ad0d341b4fa27919f8af8
        owner:
          $ref: '#/components/schemas/Owner' 
          #type: string
          example: 65c08f2dad3fb943fc5cb294
       
    Order:
      type: object
      properties:
          id: 
            type: string 
            example: 67c213596c542306ce30406d
          regDate: 
            type: string
            format: date-time
            example: "2025-02-28T19:49:45.269Z"
          totalAds: 
            type: integer
            format: int64
            example: 124
          daysAmount: 
            type: integer
            format: int64
            example: 31
          nameStrategy: 
            type: string
            example: Esperemos que calcule el mismo precio
          totalCost: 
            type: integer
            format: int64
            example: 12400
          obs: 
            type: string
            example: No puede estar vacio... un error. Directamente no hay que mandarlo.
          showName: 
            type: string
            example: Siempre Al Dia
          liq: 
            type: boolean
            example: false
          month: 
            type: string
            example: 03-2025
          regular: 
            type: boolean
            example: true
          regStructure:  
            type: array
            example: ""
          notRegularStructure: 
            type: array
            example: ""
            nullable: true
          cancelDate:
            type: string
            format: date-time
            example: "2023-11-07T03:00:00.000Z"
          paymentDate:
            type: string
            format: date-time
            example:
          paymentForm:
            type: string
            example: "Efectivo"
          paymentObs:
            type: string
            example: "Se quejo del precio"
          contract: 
            $ref: '#/components/schemas/Contract'
          spot: 
            type: string
          days_orders_blocks:
            type: array

    Owner:
      type: object
      properties:
        id: 
          type: string 
          example: 65c08f2dad3fb943fc5cb294
        regDate: 
          type: string
          format: date-time
          example: "2025-02-28T19:49:45.269Z"
        cuit:  
          type: string
          example: "23876545669"
        businessName:
          type: string
          example: Transporte DJJB
        fiscalCondition:
          type: string
          example: Consumidor Final
        shops:
          $ref: '#/components/schemas/Shop'

    Contact: 
      type: object
      properties:
        id: 
          type: string
          example: 654ad0d341b4fa27919f8af8
        regDate: 
          type: string
          format: date-time
          example: "2025-02-28T19:49:45.269Z"
        name: 
          type: string 
          example: Lautaro
        lastname:
          type: string
          example: B
        dni: 
          type: string
          example: "44996788"
        contacts:
          type: array
          format: string
          example: ['lautarob@gmail.com', '98763456789']


    Spot:
      type: object
      properties:
        id: 
          type: string
          example: 67c5228d1e93f1e663eb6884
        regDate: 
          type: string
          format: date-time
          example: "2025-02-28T19:49:45.269Z"
        long: 
          type: number
          format: int64
          example: "9876567"
        name: 
          type: string
          example: Universo Paralelo - La K'onga-1740972685919.mp3
        path: 
          type: string
          example: "./audios//Universo Paralelo_-_La_K'onga-1740972685919.mp3"
        
    Block:
      type: object
      properties: 
        id: 
          type: string
          example: 67b8ffd0cb7daee6202cfff6
        numBlock:
          type: string
          example: "1"
        starTime: 
          type: string
          example: "00:30:00"
        prices:
          type: array
          example: ["67b904464bd0c3f4c7685767"]


    Price: 
      type: object
      properties:
          id: 
            type: string 
            example: 67b904464bd0c3f4c7685767
          value: 
            type: number
            format: int64 
            example: 100
          regDate: 
            type: string 
            example: "2025-02-21T22:55:02.354Z"
          block: 
            type: string 
            example: 67b8ffd0cb7daee6202cfff6


    DayOrderBlock:
      type: object 
      properties: 
        id: 
          type: string
          example: 67b9378f348d061c1ebe69ab
        day: 
          type: string
          formate: date-time
          example: "2025-02-25T03:00:00.000Z"
        block: 
          type: string
          example: 67b8ffd0cb7daee6202cfff8
        order: 
          type: string
          example: 67b9378d348d061c1ebe699c



    DayOrderBlockResponse: 
      type: object 
      properties: 
        id: 
          type: string
          example: 67b9378f348d061c1ebe69ab
        day: 
          type: string
          formate: date-time
          example: "2025-02-25T03:00:00.000Z"
        block: 
          type: string
          example: 67b8ffd0cb7daee6202cfff8
        numBlock:
          type: string
          example: "20"
        startTimeBlock:
          type: string
          example: "00:30:00"
        order: 
          type: string
          example: 67b9378d348d061c1ebe699c
        fantasyName:
          type: string
          example: "Transporte DJJB"
        spot:
          type: string
          example: "67c5270f29de2f00c7260987"
        spotName:
          type: string
          example: "Universo_Paralelo_-_La_K'onga-1740973839666.mp3"




    User: 
      type: object
      properties: 
        id: 
          type: string
          example: 67c5228d1e93f1e663eb6884
        regDate: 
          type: string
          format: date-time
          example: "2025-02-28T19:49:45.269Z"
        username: 
          type: string
          example: admin
        password: 
          type: string
          example: admin
        role: 
          type: string
          example: admin

    
    ApiResponse:
       type: object
       properties:
         message:
           type: string
         data: 
          type: object

    ApiErrorResponse: 
      type: object
      properties:
        message:
          type: string
        error:
          type: object

    Auth:
      type: object
      properties:
        username:
          type: string
          example: admin
        password:
          type: string
          example: admin


  requestBodies:

      Auth: 
        description: Credenciales para autenticarse
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Auth'
        required: true
      
      Contract:
        description: Datos del contrato
        content:
          application/json:
            schema: 
                type: object
                properties:
                    dateTo:
                      type: string
                      format: date-time
                      example: "2023-11-07T03:00:00.000Z"
                      nullable: true
                    dateFrom:
                      type: string
                      format: date-time
                      example: "2023-11-07T03:00:00.000Z"
                    observations:
                      type: string
                      example: Prefiere estar al principio de la tanda.
                      nullable: true
                    shop: 
                      type: string
                      example: 65c090e1ad3fb943fc5cb298
                      nullable: false
        required: true

      ContractPatch:
        description: Datos para actualizar un contrato
        content:
          application/json:
            schema: 
              allOf:
                - $ref: '#/components/schemas/Contract'
                - type: object
                  properties:
                    id:
                      readOnly: true
                    regDate:
                      readOnly: true
                    dateTo:
                      nullable: true
                    dateFrom:
                      nullable: true
                    observations:
                      nullable: true
                    shop:
                      nullable: true
                      type: string
                      example: 65c090e1ad3fb943fc5cb298

      Owner:
        description: Datos del Dueño
        content:
          application/json:
            schema: 
                - type: object
                  properties:
                    cuit: 
                      type: string
                      example: 23876545669
                    businessName: 
                      type: string
                      example: Transporte DJJB
                    fiscalCondition: 
                      type: string
                      example: Consumidor Final
                    
    
      OwnerPatch:
        description: Datos para actualizar el dueño.
        content:
          application/json:
            schema: 
              allOf:
                - $ref: '#/components/schemas/Owner'
                - type: object
                  properties:
                    id:
                      readOnly: true
                    regDate:
                      readOnly: true
                    cuit:  
                      readOnly: true
                    businessName:
                      nullable: true
                    fiscalCondition:
                      nullable: true
                    shops:
                      nullable: true

      Contact:
        description: Datos del Contacto
        content:
          application/json:
            schema: 
              type: object
              properties:
                name: 
                  type: string 
                  example: Lautaro
                lastname:
                  type: string
                  example: B
                dni: 
                  type: string
                  example: "44996788"
                contacts:
                  type: array
                  example: [lb@info.com, '345344332']
                       

      ContactPatch:
        description: Datos del Contacto
        content:
          application/json:
            schema: 
              allOf:
                - $ref: '#/components/schemas/Contact'
                - type: object
                  properties:
                    id:
                      readOnly: true
                    regDate:
                      readOnly: true
                    name: 
                      nullable: true
                    lastname:
                      nullable: true
                    dni: 
                      nullable: true
                    contacts:
                      nullable: true
        
      Shop:
        description: Datos del contrato
        content:
          application/json:
            schema: 
              allOf:
                - $ref: '#/components/schemas/Shop'
                - type: object
                  properties:             
                    id:
                      readOnly: true
                    regDate:
                      readOnly: true
                    contact:
                      type: string
                      example: 654ad0d341b4fa27919f8af8
                    owner:
                      type: string
                      example: 65c08f2dad3fb943fc5cb294

                    
      ShopPatch:
        description: Datos del contrato
        content:
          application/json:
            schema: 
              allOf:
                - $ref: '#/components/schemas/Contract'
                - type: object
                  properties:             
                    id:
                      readOnly: true
                    regDate:
                      readOnly: true
                    fantasyName: 
                      nullable: true
                    address: 
                      nullable: true
                    billingType: 
                      nullable: true
                    mail: 
                      nullable: true
                    usualPaymentForm: 
                      nullable: true
                    type: 
                      nullable: true
                    contact:
                      nullable: true
                    owner:
                      nullable: true

      SpotFile:
        description: Carga el archivo de audio.
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name: 
                  type: string
                  example: 'Nombre'
                audio:
                  type: string
                  format: binary
            encoding:
              audio:
                contentType: audio/mpeg


      Block:
        description: Datos del bloque a crear
        content:
          application/json:
            schema: 
                - type: object
                  properties:   
                    numBlock: 
                      type: string
                      example: "1"
                    starTime: 
                      type: string
                      example: "00:30:00"



      BlockParch:
        description: Datos del bloque a editar
        content:
          application/json:
            schema: 
              allOf:
                - $ref: '#/components/schemas/Block'
                - type: object
                  properties:             
                    id:
                      readOnly: true
                    numBlock:
                      nullable: true
                      example: "50"
                    starTime: 
                      nullable: true
                      example: "10:15:00"
                    prices:
                      nullable: true


      Price:
        description: Datos del precio a crear
        content:
          application/json:
            schema: 
              type: object
              properties:             
                value: 
                  type: number
                  format: int64
                  example: 100.00
                block: 
                  type: string
                  example: 67b8ffd0cb7daee6202cfff8

      PricePatch:
        description: Datos del precio a crear
        content:
          application/json:
            schema: 
              type: object
              properties:             
                value: 
                  type: number
                  format: int64
                  example: 100.00
                  nullable: true
                block: 
                  type: string
                  example: 67b8ffd0cb7daee6202cfff8
                  nullable: true

      Order:
        description: Datos para crear una orden 
        content: 
          application/json:
            schema: 
              type: object
              properties:
                  nameStrategy: 
                    type: string
                    example: Esperemos que calcule el mismo precio
                    nullable: true
                  obs: 
                    type: string
                    example: No puede estar vacio... un error. Directamente no hay que mandarlo.
                    nullable: true
                  showName: 
                    type: string
                    example: Siempre Al Dia
                    nullable: true
                
                  month: 
                    type: string
                    example: 03-2025
                    nullable: false

                  regular: 
                    type: boolean
                    example: true

                  regStructure:  
                    type: object
                    example:  {
                        monday: ["25", "26", "27", "28"],
                        tuesday: ["5", "6", "7", "8"],
                        wednesday: ["9", "10", "11", "12"],
                        thursday: ["13", "14", "15", "16"],
                        friday: ["17", "18", "19", "20"],
                        saturday: ["21", "22", "23", "24"],
                        sunday: ["25", "26", "27", "28"] }
                    nullable: true

                  notRegularStructure: 
                    type: array
                    example: ["2025-2-25",["1", "2", "3", "4"]]
                    nullable: true

                  contract: 
                    type: string
                    example:
                    nullable: false

                  spot: 
                    type: string
                    nullable: false

                  days_orders_blocks:
                    type: array
                    nullable: false

      OrderPatch:
        description: Datos para crear una orden 
        content: 
          application/json:
            schema: 
              type: object
              properties:
                  nameStrategy: 
                    type: string
                    example: Esperemos que calcule el mismo precio
                    nullable: true
                  obs: 
                    type: string
                    example: No puede estar vacio... un error. Directamente no hay que mandarlo.
                    nullable: true
                  showName: 
                    type: string
                    example: Siempre Al Dia
                    nullable: true
                
                  month: 
                    type: string
                    example: 03-2025
                    nullable: true

                  regStructure:  
                    type: object
                    example:  {
                        monday: ["25", "26", "27", "28"],
                        tuesday: ["5", "6", "7", "8"],
                        wednesday: ["9", "10", "11", "12"],
                        thursday: ["13", "14", "15", "16"],
                        friday: ["17", "18", "19", "20"],
                        saturday: ["21", "22", "23", "24"],
                        sunday: ["25", "26", "27", "28"] }
                    nullable: true

                  notRegularStructure: 
                    type: array
                    example: ["2025-2-25",["1", "2", "3", "4"]]
                    nullable: true

                  contract: 
                    type: string
                    example:
                    nullable: true

                  spot: 
                    type: string
                    nullable: true

                  days_orders_blocks:
                    type: array
                    nullable: true

      CancelOrder:
        description: Fecha para cancela una orden.
        content:
          application/json: 
            schema:
              type: object
              properties: 
                cancelDate:
                  type: string
                  format: date-time
                  example: "2023-11-07T03:00:00.000Z"


      PayOrder:
        description: Fecha para pagar una orden.
        content:
          application/json: 
            schema:
              type: object
              properties: 
                paymentDate:
                  type: string
                  format: date-time
                  example:
                paymentForm:
                  type: string
                  example: "Efectivo"
                paymentObs:
                  type: string
                  example: "Se quejo del precio"

      

      User:
        description: Datos para crear un usuario.
        content:
          application/json: 
            schema:
              type: object
              properties: 
                username:
                  type: string
                  example: admin4
                password:
                  type: string
                  example: "admin4"
                role:
                  type: string
                  example: "admin"


      UserPatch:
        description: Datos para actualizar un usuario.
        content:
          application/json: 
            schema:
              type: object
              properties: 
                username:
                  type: string
                  example: admin4
                  nullable: true
                password:
                  type: string
                  example: "admin4"
                  nullable: true
                role:
                  type: string
                  example: "admin"
                  nullable: true